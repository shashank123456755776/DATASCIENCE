# behave like a itertaors
# Generator = Function with yield.
# Used for large data, infinite data, memory efficiency.
# Works as an iterator.
# jab loops chnalna ho but we dont wants to use variables 
for _ in range(5):
    print("Hello")
#   return vs yield

# return ‚Üí value ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§î‡§∞ function ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

# yield ‚Üí value ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® function pause ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§Ö‡§ó‡§≤‡•Ä ‡§¨‡§æ‡§∞ call ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡§π‡•Ä‡§Ç ‡§∏‡•á ‡§´‡§ø‡§∞ continue ‡§π‡•ã‡§ó‡§æ‡•§ 
# yield yaad rakhta hai jab hmm bare data ke sath kaam karte hai  
def number(n):
    while n>0:
        yield n
        n-=1
# Here generators in greating either by for loop and next()
for i in number(5):
    print(i)


# return ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?

# Value ‡§¶‡•á‡§§‡§æ ‡§π‡•à

# Function ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à

# ‡§Ö‡§ó‡§≤‡•Ä ‡§¨‡§æ‡§∞ call ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ function ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§∏‡•á ‡§ö‡§≤‡•á‡§ó‡§æ

# üîπ yield ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?

# Value ‡§¶‡•á‡§§‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á return)

# ‡§≤‡•á‡§ï‡§ø‡§® function ‡§ñ‡§§‡•ç‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ, ‡§¨‡§∏ pause ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à

# ‡§Ö‡§ó‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§ú‡§¨ generator ‡§ï‡•ã call ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á (next() ‡§Ø‡§æ for loop), function pause ‡§µ‡§æ‡§≤‡•Ä ‡§ú‡§ó‡§π ‡§∏‡•á ‡§Ü‡§ó‡•á continue ‡§π‡•ã‡§ó‡§æ



# decorators and generators difference 
# decorators ka use hmm function mai extra functionality add karne ke liye karte hai with affect original function like authentication,two factor authentications 
# jaha genertaors ka use karte hai  bare data pe kaam karne mai such that pure iteratots pure memmory na le ekhi  value excute ho 



    